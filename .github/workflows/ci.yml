name: CI
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  cache:
    name: CI cache
    runs-on: ubuntu-latest
    outputs:
      yarn-cache-key: ${{ steps.yarn-cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: Remove git auth
        run: git config --unset http.https://github.com/.extraheader
      - name: Generate yarn cache-key
        id: yarn-cache-key
        run: echo "::set-output name=key::${{ runner.os }}-yarn-ci-cache-v3-${{ hashFiles('./yarn.lock') }}-${{ hashFiles('**/yarn.lock') }}"
      - name: Configure Yarn cache
        uses: actions/cache@v3
        with:
          key: ${{ steps.yarn-cache-key.outputs.key }}
          path: |
            ~/.cache/Cypress
            .yarn
            node_modules
            example/node_modules
      - name: Install dependencies
        if: ${{ github.actor != 'dependabot[bot]' || github.ref == 'refs/heads/main' }}
        run: yarn --immutable
      - name: Reset yarn.lock (due to dependabot incompatibility with yarn 3)
        if: ${{ github.actor == 'dependabot[bot]' && github.ref != 'refs/heads/main' }}
        run: "git checkout HEAD~1 yarn.lock"
      - name: Install dependencies & update yarn.lock (dependabot)
        if: ${{ github.actor == 'dependabot[bot]' && github.ref != 'refs/heads/main' }}
        run: "yarn install && git stage yarn.lock && git commit -m 'chore: update yarn.lock' && git push"
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: remove git auth
        run: git config --unset http.https://github.com/.extraheader
      - name: Configure Yarn cache
        uses: actions/cache@v3
        with:
          key: ${{ needs.cache.outputs.yarn-cache-key }}
          path: |
            ~/.cache/Cypress
            .yarn
            node_modules
            example/node_modules
      - name: Install dependencies
        run: yarn --immutable
      - name: Lint
        run: yarn lint:ci
      - name: Prettify
        run: yarn prettify:ci

  test:
    name: test
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: remove git auth
        run: git config --unset http.https://github.com/.extraheader
      - name: Configure Yarn cache
        uses: actions/cache@v3
        with:
          key: ${{ needs.cache.outputs.yarn-cache-key }}
          path: |
            ~/.cache/Cypress
            .yarn
            node_modules
            example/node_modules
      - name: Install dependencies
        run: yarn --immutable
      - name: Build plugin
        run: yarn build
      - name: Install example dependencies
        run: cd example && yarn --immutable
      - name: Test e2e
        run: yarn test:e2e:ci
      - name: Test component-testing
        run: yarn test:ct:ci

  test-integration-coverage:
    name: test-integration-coverage
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: remove git auth
        run: git config --unset http.https://github.com/.extraheader
      - name: Configure Yarn cache
        uses: actions/cache@v3
        with:
          key: ${{ needs.cache.outputs.yarn-cache-key }}
          path: |
            ~/.cache/Cypress
            .yarn
            node_modules
            example/node_modules
      - name: Install dependencies
        run: yarn --immutable
      - name: Test integration (with coverage) and upload to CodeClimate
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: paambaati/codeclimate-action@v3.2.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          debug: true
          coverageCommand: yarn test:integration:ci
          coverageLocations: |
            ${{github.workspace}}/coverage/lcov.info:lcov
      - name: Test integration (with coverage)
        if: ${{ github.ref != 'refs/heads/main' }}
        run: yarn test:integration:ci

  build-and-release:
    name: build and release
    runs-on: ubuntu-latest
    needs: [cache, lint, test, test-integration-coverage]
    if: ${{ github.actor != 'dependabot[bot]' && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v3
        with:
          # pulls all commits (needed for lerna / semantic release to correctly version)
          fetch-depth: "0"
      - name: Setup git user
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
      - uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      - name: remove git auth
        run: git config --unset http.https://github.com/.extraheader
      - name: Configure Yarn cache
        uses: actions/cache@v3
        with:
          key: ${{ needs.cache.outputs.yarn-cache-key }}
          path: |
            ~/.cache/Cypress
            .yarn
            node_modules
            example/node_modules
      - name: Install dependencies
        run: yarn --immutable
      - name: Authenticate with Registry
        run: |
          yarn npm logout
          echo "registry=http://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: release package
        if: ${{ success() }}
        run: yarn release:ci
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_REGISTRY: https://registry.npmjs.org/
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
